"""
Django settings for ert project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import json
import logging
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
from pathlib import Path

from django.core.exceptions import ImproperlyConfigured

BASE_DIR = Path(__file__).parents[2]  # project folder


def get_secret(setting):
    file_path = str(BASE_DIR / 'config' / 'settings' / 'secrets.json')
    try:
        with open(file_path) as file:
            secrets = json.loads(file.read())
            try:
                return secrets[setting]
            except KeyError:
                error_message = "Set the {0} environment variable".format(setting)
                raise ImproperlyConfigured(error_message)
    except FileNotFoundError:
        error_message = "secrets.json not found in settings folder"
        raise ImproperlyConfigured(error_message)


def get_local_log_file_path():
    sql_queries_log_file_path = BASE_DIR / 'config' / 'logs' / 'project_logs' / 'project.log'
    sql_queries_log_file_path.touch()
    return str(sql_queries_log_file_path)


def get_local_custom_log_file_path(logfile_name):
    if logfile_name == '' or logfile_name == None:
        raise Exception('Log file name not provided, '+str(logfile_name))
    log_file_path = BASE_DIR / 'config' / 'logs' / 'project_logs' / logfile_name
    log_file_path.touch()
    return str(log_file_path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

# Application definition

THIRD_PARTY_APPS = [
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django_extensions',
    'oauth2_provider',
    'djmoney',
    'fsm_admin',
    'django_fsm_log',
    'import_export',
    # 'elasticapm.contrib.django',
    'rest_framework',
    'rest_framework_gis',
    'django_filters',
    'corsheaders',
]

CUSTOM_APPS = [
    'authentication',
    'center',
    'executives',
    'logs',
    'member',
    'utilities',
    'reports',
    'operation_manifest'
]

INSTALLED_APPS = THIRD_PARTY_APPS + CUSTOM_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'elasticapm.contrib.django.middleware.TracingMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Calcutta'

USE_I18N = True

USE_L10N = True

# USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# REST_FRAMEWORK Settings

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 5,
    'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S",
    # 'DEFAULT_PARSER_CLASSES': (
    #     'rest_framework.parsers.JSONParser',
    # ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework.authentication.SessionAuthentication',  # To keep the Browsable API
    ),
}

# LOGGING MODULE
info_logger = logging.getLogger('custom_info_logger')
error_logger = logging.getLogger('custom_error_logger')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S'
        },
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(pathname)s:%(lineno)s] %(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S'
        },
    },
    'handlers': {
        'proj_log_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': get_local_log_file_path(),
            'maxBytes': 1024 * 1024 * 10,  # 10 MB
            'backupCount': 5,
            'formatter': 'simple'
        },
        'info_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': get_local_custom_log_file_path('info.log'),
            'formatter': 'verbose'
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': get_local_custom_log_file_path('error.log'),
            'formatter': 'verbose'
        },
        'console': {
            'level': 'DEBUG',
            # 'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'project': {
            'handlers': ['proj_log_file'],
            'level': 'DEBUG',
            'propagate': True
        },
        'custom_info_logger': {
            'handlers': ['info_file'],
            'level': 'DEBUG',
        },
        'custom_error_logger': {
            'handlers': ['console', 'error_file'],
            'level': 'DEBUG',
        },
    }
}

AUTH_USER_MODEL = 'authentication.User'
GRAPPELLI_ADMIN_TITLE = "ERT BACKEND ADMIN"

# OAUTH2_SETTINGS

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {
        'read': 'Read scope',
        'write': 'Write scope'
    },
    'REFRESH_TOKEN_EXPIRE_SECONDS': 86400,
    'OAUTH2_VALIDATOR_CLASS': 'authentication.validators.CustomOAuth2Validator'
}

# elastic-apm settings

ELASTIC_APM = {
    'SERVICE_NAME': 'ERT_BACKEND',
    'SERVER_URL': 'http://34.93.91.226:8200/',
    'DJANGO_TRANSACTION_NAME_FROM_ROUTE': True,
    'SERVER_TIMEOUT': '200ms'
}

CORS_ORIGIN_ALLOW_ALL = True

# AWS
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_ACCESS_KEY_ID = get_secret("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = get_secret("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = get_secret("AWS_STORAGE_BUCKET_NAME")
AWS_S3_ENDPOINT_URL = 'https://s3.amazonaws.com'
AWS_S3_REGION_NAME = 'ap-south-1'

S3DIRECT_DESTINATIONS = {
    'primary_destination': {
        'key': 'uploads/',
        'allowed': ['image/jpg', 'image/jpeg', 'image/png'],
    },
}
